{"ast":null,"code":"import RestAPI from '../rest';\nconst initial = [{\n  id: 1,\n  event_id: 1,\n  customer_id: 1,\n  registration_date: '2019-01-01',\n  notes: 'looking forward to the event'\n}, {\n  id: 2,\n  event_id: 1,\n  customer_id: 2,\n  registration_date: '2019-01-05',\n  notes: 'is parking available?'\n}];\n\nconst registrations = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'ADD_REGISTRATION':\n      {\n        console.log(\"in reducer registration.ADD_REGISTRATION\");\n        let otherregistrations = state.filter(registration => {\n          if (registration.id === action.registration.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherregistrations, Object.assign({}, action.registration)];\n        console.log(\"in reducer registration.ADD_REGISTRATION, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'DELETE_REGISTRATION':\n      {\n        console.log(\"in reducer registrations.DELETE_REGISTRATION\");\n        let otherregistrations = state.filter(registration => {\n          if (registration.id === action.registration.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherregistrations];\n        console.log(\"in reducer registrations.DELETE_REGISTRATION, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'GET_REGISTRATIONS':\n      {\n        console.log(\"in reducer registrations.GET_REGISTRATIONS\", state);\n        new RestAPI().getRegistrations(action.dispatch);\n        return state;\n      }\n\n    case 'APPLY_REGISTRATIONS_UPDATE':\n      {\n        console.log(\"in reducer registrations.APPLY_REGISTRATIONS_UPDATE\", action.registrations);\n        let newstate = [...action.registrations];\n        return newstate;\n      }\n\n    default:\n      console.log(\"in reducer registration.default\");\n      return state;\n  }\n};\n\nexport default registrations;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/reducers/registrations.js"],"names":["RestAPI","initial","id","event_id","customer_id","registration_date","notes","registrations","state","action","data","type","console","log","otherregistrations","filter","registration","newstate","Object","assign","JSON","stringify","getRegistrations","dispatch"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAGA,MAAMC,OAAO,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,QAAQ,EAAE,CAAnB;AAAsBC,EAAAA,WAAW,EAAE,CAAnC;AAAsCC,EAAAA,iBAAiB,EAAE,YAAzD;AAAuEC,EAAAA,KAAK,EAAE;AAA9E,CADY,EAEZ;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,QAAQ,EAAE,CAAnB;AAAsBC,EAAAA,WAAW,EAAE,CAAnC;AAAsCC,EAAAA,iBAAiB,EAAE,YAAzD;AAAuEC,EAAAA,KAAK,EAAE;AAA9E,CAFY,CAAhB;;AAIA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGP,OAAT,EAAkBQ,MAAlB,EAA0BC,IAA1B,KAAmC;AACrD,UAAQD,MAAM,CAACE,IAAf;AAEI,SAAK,kBAAL;AAAyB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACA,YAAIC,kBAAkB,GAAGN,KAAK,CAACO,MAAN,CACrBC,YAAY,IAAI;AACZ,cAAIA,YAAY,CAACd,EAAb,KAAoBO,MAAM,CAACO,YAAP,CAAoBd,EAA5C,EAAiD;AAC7C,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPoB,CAAzB;AASA,YAAIe,QAAQ,GAAG,CAAC,GAAGH,kBAAJ,EAAwBI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,MAAM,CAACO,YAAzB,CAAxB,CAAf;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,yDAAyDO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAArE;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,qBAAL;AAA4B;AACxBL,QAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACA,YAAIC,kBAAkB,GAAGN,KAAK,CAACO,MAAN,CACpBC,YAAD,IAAkB;AACd,cAAIA,YAAY,CAACd,EAAb,KAAoBO,MAAM,CAACO,YAAP,CAAoBd,EAA5C,EAAiD;AAC7C,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPoB,CAAzB;AASA,YAAIe,QAAQ,GAAG,CAAC,GAAGH,kBAAJ,CAAf;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,6DAA6DO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAzE;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,mBAAL;AAA0B;AACtBL,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DL,KAA1D;AACA,YAAIR,OAAJ,GAAcsB,gBAAd,CAA+Bb,MAAM,CAACc,QAAtC;AACA,eAAOf,KAAP;AACH;;AAED,SAAK,4BAAL;AAAmC;AAC/BI,QAAAA,OAAO,CAACC,GAAR,CAAY,qDAAZ,EAAmEJ,MAAM,CAACF,aAA1E;AACA,YAAIU,QAAQ,GAAG,CAAC,GAAGR,MAAM,CAACF,aAAX,CAAf;AACA,eAAOU,QAAP;AACH;;AAED;AACIL,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA,aAAOL,KAAP;AAhDR;AAkDH,CAnDD;;AAqDA,eAAeD,aAAf","sourcesContent":["import RestAPI from '../rest';\n\n\nconst initial = [\n    { id: 1, event_id: 1, customer_id: 1, registration_date: '2019-01-01', notes: 'looking forward to the event' },\n    { id: 2, event_id: 1, customer_id: 2, registration_date: '2019-01-05', notes: 'is parking available?' }];\n\nconst registrations = (state = initial, action, data) => {\n    switch (action.type) {\n\n        case 'ADD_REGISTRATION': {\n            console.log(\"in reducer registration.ADD_REGISTRATION\");\n            let otherregistrations = state.filter(\n                registration => {\n                    if (registration.id === action.registration.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherregistrations, Object.assign({}, action.registration)]\n            console.log(\"in reducer registration.ADD_REGISTRATION, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'DELETE_REGISTRATION': {\n            console.log(\"in reducer registrations.DELETE_REGISTRATION\");\n            let otherregistrations = state.filter(\n                (registration) => {\n                    if (registration.id === action.registration.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherregistrations]\n            console.log(\"in reducer registrations.DELETE_REGISTRATION, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'GET_REGISTRATIONS': {\n            console.log(\"in reducer registrations.GET_REGISTRATIONS\", state);\n            new RestAPI().getRegistrations(action.dispatch);\n            return state;\n        }\n\n        case 'APPLY_REGISTRATIONS_UPDATE': {\n            console.log(\"in reducer registrations.APPLY_REGISTRATIONS_UPDATE\", action.registrations);\n            let newstate = [...action.registrations];\n            return newstate;\n        }\n\n        default:\n            console.log(\"in reducer registration.default\");\n            return state\n    }\n}\n\nexport default registrations"]},"metadata":{},"sourceType":"module"}