{"ast":null,"code":"import RestAPI from '../rest';\nlet initial = {\n  username: \"\",\n  password: \"\",\n  mode: \"login\",\n  loginstate: \"initial\"\n};\nconst savedState = sessionStorage.getItem('loginState');\n\nif (savedState != null) {\n  initial = Object.assign({}, initial, JSON.parse(savedState));\n}\n\nconst appState = (state = initial, action, data) => {\n  console.log(\"in reducer login\");\n\n  switch (action.type) {\n    case 'SET_REGISTRATION_MODE':\n      {\n        let mode = {\n          \"mode\": 'register'\n        };\n        let fields = {\n          \"username\": \"\",\n          \"email\": \"\",\n          \"password\": \"\"\n        };\n        let new_state = Object.assign({}, state, mode, fields);\n        return new_state;\n      }\n\n    case 'REGISTER_USER':\n      {\n        console.log(\"login.REGISTER_USER: \");\n        new RestAPI().registerUser(action.dispatch, action.username, action.password, action.email);\n        let mode = {\n          \"mode\": 'login'\n        };\n        let new_state = Object.assign({}, state, mode);\n        return new_state;\n      }\n\n    case 'LOGIN_TO_APP':\n      {\n        let newState = {\n          username: action.username,\n          password: action.password,\n          loginstate: action.loginstate,\n          mode: 'login'\n        };\n        console.log(\"in LOGIN_TO_APP\");\n        console.log(\"login.LOGIN_TO_APP: \" + JSON.stringify(newState));\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        sessionStorage.setItem('loginState', JSON.stringify(newState));\n        return Object.assign({}, newState);\n      }\n\n    case 'GET_JWT_TOKEN':\n      {\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        break;\n      }\n\n    case 'LOG_OUT':\n      {\n        let newState = {\n          username: 'none',\n          password: '',\n          loginstate: 'logged-out',\n          mode: 'login'\n        };\n        console.log(\"in LOG_OUT\");\n        console.log(\"login.LOG_OUT: \" + JSON.stringify(newState));\n        window['token'] = null;\n        return Object.assign({}, newState);\n      }\n\n    case 'LOGIN_SUCCESS':\n      {\n        // update state with token and login status\n        let loginstate = 'logged-in';\n        let token = action.token;\n        const obj = Object.assign({}, state, {\n          loginstate,\n          \"token\": token\n        });\n        window['token'] = token;\n        return obj;\n      }\n\n    case 'LOGIN_FAILED':\n      {\n        // update state with token and login status\n        alert(\"login failed!\");\n        let loginstate = 'login-failed';\n        let token = \"\";\n        let mode = \"login\";\n        const obj = Object.assign({}, state, {\n          loginstate,\n          token,\n          mode\n        });\n        return obj;\n      }\n\n    case 'UPDATE_LOGIN_FORM_OBJECT':\n      {\n        console.log(\"in reducer login.UPDATE_LOGIN_FORM_OBJECT\");\n        let field = {};\n        field[action.field_name] = action.field_value;\n        const obj = Object.assign({}, state, field);\n        console.log(\"login.UPDATE_LOGIN_FORM_OBJECT: \" + JSON.stringify(obj));\n        return obj;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default appState;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/reducers/login.js"],"names":["RestAPI","initial","username","password","mode","loginstate","savedState","sessionStorage","getItem","Object","assign","JSON","parse","appState","state","action","data","console","log","type","fields","new_state","registerUser","dispatch","email","newState","stringify","getJWTToken","setItem","window","token","obj","alert","field","field_name","field_value"],"mappings":"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","sourcesContent":["import RestAPI from '../rest';\nlet initial = {username:\"\", password:\"\", mode: \"login\", loginstate: \"initial\" };\nconst savedState = sessionStorage.getItem('loginState');\nif(savedState != null){\n    initial = Object.assign({}, initial, JSON.parse(savedState));\n}\n\n\nconst appState = (state = initial, action, data) => {\n    console.log(\"in reducer login\");\n\n    switch (action.type) {\n\n    case 'SET_REGISTRATION_MODE':{\n        let mode = {\"mode\":'register'};\n        let fields = {\"username\":\"\", \"email\": \"\", \"password\": \"\"};\n        let new_state = Object.assign({}, state, mode, fields);\n        return new_state;\n    }\n\n    case 'REGISTER_USER': {\n        console.log( \"login.REGISTER_USER: \");\n        new RestAPI().registerUser(action.dispatch, action.username, action.password, action.email);\n        let mode = {\"mode\":'login'};\n        let new_state = Object.assign({}, state, mode);\n        return new_state;    \n    }\n\n    case 'LOGIN_TO_APP': {\n        let newState = {username: action.username, password:action.password, loginstate: action.loginstate, mode: 'login' };\n        console.log(\"in LOGIN_TO_APP\");\n        console.log( \"login.LOGIN_TO_APP: \" + JSON.stringify(newState));\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        sessionStorage.setItem('loginState', JSON.stringify(newState));\n        return  Object.assign({}, newState);\n    } \n    case 'GET_JWT_TOKEN':{\n        new RestAPI().getJWTToken(action.dispatch, action.username, action.password);\n        break;\n    }\n\n    case 'LOG_OUT': {\n        let newState = {username: 'none', password:'', loginstate: 'logged-out', mode: 'login' };\n        console.log(\"in LOG_OUT\");\n        console.log( \"login.LOG_OUT: \" + JSON.stringify(newState));\n        window['token'] = null;\n        return  Object.assign({}, newState);       \n    }\n\n    case 'LOGIN_SUCCESS': {\n        // update state with token and login status\n        let loginstate = 'logged-in';\n        let token = action.token;\n        const obj = Object.assign({}, state, { loginstate, \"token\":token });\n        window['token'] = token;\n        return obj;        \n    }\n    case 'LOGIN_FAILED': {\n        // update state with token and login status\n        alert(\"login failed!\");\n        let loginstate = 'login-failed';\n        let token = \"\";\n        let mode = \"login\";\n        const obj = Object.assign({}, state, { loginstate, token, mode });\n        return obj;       \n    }\n\n    case 'UPDATE_LOGIN_FORM_OBJECT': {\n        console.log(\"in reducer login.UPDATE_LOGIN_FORM_OBJECT\");\n        let field = {};\n        field[action.field_name] = action.field_value;\n        const obj = Object.assign({}, state, field);\n        console.log( \"login.UPDATE_LOGIN_FORM_OBJECT: \" + JSON.stringify(obj));\n        return obj;\n      }\n    default:\n        return state\n    }\n}\n\nexport default appState"]},"metadata":{},"sourceType":"module"}