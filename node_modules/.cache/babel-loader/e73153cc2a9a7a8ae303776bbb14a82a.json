{"ast":null,"code":"import RestAPI from '../rest';\nconst initial = [{\n  id: 100,\n  name: 'Brian',\n  email: 'brian@a.com'\n}, {\n  id: 101,\n  name: 'Scott',\n  email: 'scott@a.com'\n}, {\n  id: 102,\n  name: 'Jeff',\n  email: 'jeff@a.com'\n}];\n\nconst customers = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'ADD_CUSTOMER':\n      {\n        console.log(\"in reducer customer.ADD_CUSTOMER\");\n        let othercustomers = state.filter(customer => {\n          if (customer.id === action.customer.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...othercustomers, Object.assign({}, action.customer)];\n        console.log(\"in reducer customer.ADD_CUSTOMER, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'DELETE_CUSTOMER':\n      {\n        console.log(\"in reducer customers.DELETE_CUSTOMER\");\n        let othercustomers = state.filter(customer => {\n          if (customer.id === action.customer.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...othercustomers];\n        console.log(\"in reducer customers.DELETE_CUSTOMER, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'APPLY_CUSTOMERS_UPDATE':\n      {\n        console.log(\"in reducer customers.APPLY_CUSTOMERS_UPDATE\", action.customers);\n        let newstate = [...action.customers];\n        return newstate;\n      }\n\n    case 'GET_CUSTOMERS':\n      {\n        console.log(\"in reducer customers.GET_CUSTOMERS\", state);\n        new RestAPI().getCustomers(action.dispatch);\n        return state;\n      }\n\n    default:\n      console.log(\"in reducer customer.default\");\n      return state;\n  }\n};\n\nexport default customers;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/reducers/customers.js"],"names":["RestAPI","initial","id","name","email","customers","state","action","data","type","console","log","othercustomers","filter","customer","newstate","Object","assign","JSON","stringify","getCustomers","dispatch"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,OAAjB;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CAAD,EAChB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,OAAjB;AAA0BC,EAAAA,KAAK,EAAE;AAAjC,CADgB,EAEhB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,MAAjB;AAAyBC,EAAAA,KAAK,EAAE;AAAhC,CAFgB,CAAhB;;AAIA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGL,OAAT,EAAkBM,MAAlB,EAA0BC,IAA1B,KAAmC;AACjD,UAAQD,MAAM,CAACE,IAAf;AAEI,SAAK,cAAL;AAAqB;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,YAAIC,cAAc,GAAGN,KAAK,CAACO,MAAN,CACjBC,QAAQ,IAAI;AACR,cAAIA,QAAQ,CAACZ,EAAT,KAAgBK,MAAM,CAACO,QAAP,CAAgBZ,EAApC,EAAyC;AACrC,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPgB,CAArB;AASA,YAAIa,QAAQ,GAAG,CAAC,GAAGH,cAAJ,EAAoBI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,MAAM,CAACO,QAAzB,CAApB,CAAf;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,iDAAiDO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAA7D;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,iBAAL;AAAwB;AACpBL,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACA,YAAIC,cAAc,GAAGN,KAAK,CAACO,MAAN,CAChBC,QAAD,IAAc;AACV,cAAIA,QAAQ,CAACZ,EAAT,KAAgBK,MAAM,CAACO,QAAP,CAAgBZ,EAApC,EAAyC;AACrC,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPgB,CAArB;AASA,YAAIa,QAAQ,GAAG,CAAC,GAAGH,cAAJ,CAAf;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,qDAAqDO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAjE;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,wBAAL;AAA+B;AAC3BL,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DJ,MAAM,CAACF,SAAlE;AACA,YAAIU,QAAQ,GAAG,CAAC,GAAGR,MAAM,CAACF,SAAX,CAAf;AACA,eAAOU,QAAP;AACH;;AAED,SAAK,eAAL;AAAsB;AAClBL,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDL,KAAlD;AACA,YAAIN,OAAJ,GAAcoB,YAAd,CAA2Bb,MAAM,CAACc,QAAlC;AACA,eAAOf,KAAP;AACH;;AAED;AACII,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,aAAOL,KAAP;AAhDR;AAkDH,CAnDD;;AAqDA,eAAeD,SAAf","sourcesContent":["import RestAPI from '../rest';\n\nconst initial = [{ id: 100, name: 'Brian', email: 'brian@a.com' },\n{ id: 101, name: 'Scott', email: 'scott@a.com' },\n{ id: 102, name: 'Jeff', email: 'jeff@a.com' }];\n\nconst customers = (state = initial, action, data) => {\n    switch (action.type) {\n\n        case 'ADD_CUSTOMER': {\n            console.log(\"in reducer customer.ADD_CUSTOMER\");\n            let othercustomers = state.filter(\n                customer => {\n                    if (customer.id === action.customer.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...othercustomers, Object.assign({}, action.customer)]\n            console.log(\"in reducer customer.ADD_CUSTOMER, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'DELETE_CUSTOMER': {\n            console.log(\"in reducer customers.DELETE_CUSTOMER\");\n            let othercustomers = state.filter(\n                (customer) => {\n                    if (customer.id === action.customer.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...othercustomers]\n            console.log(\"in reducer customers.DELETE_CUSTOMER, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'APPLY_CUSTOMERS_UPDATE': {\n            console.log(\"in reducer customers.APPLY_CUSTOMERS_UPDATE\", action.customers);\n            let newstate = [...action.customers];\n            return newstate;\n        }\n\n        case 'GET_CUSTOMERS': {\n            console.log(\"in reducer customers.GET_CUSTOMERS\", state);\n            new RestAPI().getCustomers(action.dispatch);\n            return state;\n        }\n\n        default:\n            console.log(\"in reducer customer.default\");\n            return state\n    }\n}\n\nexport default customers"]},"metadata":{},"sourceType":"module"}