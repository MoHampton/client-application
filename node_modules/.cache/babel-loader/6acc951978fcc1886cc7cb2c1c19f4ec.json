{"ast":null,"code":"import RestAPI from '../rest';\nconst initial = [{\n  id: 100,\n  code: 'CNF001',\n  title: 'All-Java Conference',\n  description: 'Lectures and exhibits covering all Java topics'\n}, {\n  id: 101,\n  code: 'CNC001',\n  title: 'Rock Concert',\n  description: 'Full blown rock concert'\n}];\n\nconst events = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'ADD_EVENT':\n      {\n        console.log(\"in reducer event.ADD_EVENT\");\n        let otherevents = state.filter(event => {\n          if (event.id === action.event.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherevents, Object.assign({}, action.event)];\n        console.log(\"in reducer event.ADD_EVENT, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'DELETE_EVENT':\n      {\n        console.log(\"in reducer events.DELETE_EVENT\");\n        let otherevents = state.filter(event => {\n          if (event.id === action.event.id) {\n            return false;\n          } else {\n            return true;\n          }\n        });\n        let newstate = [...otherevents];\n        console.log(\"in reducer events.DELETE_EVENT, newstate: \" + JSON.stringify(newstate));\n        return newstate;\n      }\n\n    case 'APPLY_EVENTS_UPDATE':\n      {\n        console.log(\"in reducer events.APPLY_EVENTS_UPDATE\", action.events);\n        let newstate = [...action.events];\n        return newstate;\n      }\n\n    case 'GET_EVENTS':\n      {\n        console.log(\"in reducer events.GET_EVENTS\", state);\n        new RestAPI().getEvents(action.dispatch);\n        return state;\n      }\n\n    default:\n      console.log(\"in reducer event.default\");\n      return state;\n  }\n};\n\nexport default events;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/reducers/events.js"],"names":["RestAPI","initial","id","code","title","description","events","state","action","data","type","console","log","otherevents","filter","event","newstate","Object","assign","JSON","stringify","getEvents","dispatch"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,MAAMC,OAAO,GAAG,CACZ;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,QAAjB;AAA2BC,EAAAA,KAAK,EAAE,qBAAlC;AAAyDC,EAAAA,WAAW,EAAE;AAAtE,CADY,EAEZ;AAAEH,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,IAAI,EAAE,QAAjB;AAA2BC,EAAAA,KAAK,EAAE,cAAlC;AAAkDC,EAAAA,WAAW,EAAE;AAA/D,CAFY,CAAhB;;AAIA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGN,OAAT,EAAkBO,MAAlB,EAA0BC,IAA1B,KAAmC;AAC9C,UAAQD,MAAM,CAACE,IAAf;AAEI,SAAK,WAAL;AAAkB;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACA,YAAIC,WAAW,GAAGN,KAAK,CAACO,MAAN,CACdC,KAAK,IAAI;AACL,cAAIA,KAAK,CAACb,EAAN,KAAaM,MAAM,CAACO,KAAP,CAAab,EAA9B,EAAmC;AAC/B,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPa,CAAlB;AASA,YAAIc,QAAQ,GAAG,CAAC,GAAGH,WAAJ,EAAiBI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,MAAM,CAACO,KAAzB,CAAjB,CAAf;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAA2CO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAvD;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,cAAL;AAAqB;AACjBL,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACA,YAAIC,WAAW,GAAGN,KAAK,CAACO,MAAN,CACbC,KAAD,IAAW;AACP,cAAIA,KAAK,CAACb,EAAN,KAAaM,MAAM,CAACO,KAAP,CAAab,EAA9B,EAAmC;AAC/B,mBAAO,KAAP;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ,SAPa,CAAlB;AASA,YAAIc,QAAQ,GAAG,CAAC,GAAGH,WAAJ,CAAf;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAA+CO,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAA3D;AACA,eAAOA,QAAP;AACH;;AAED,SAAK,qBAAL;AAA4B;AACxBL,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDJ,MAAM,CAACF,MAA5D;AACA,YAAIU,QAAQ,GAAG,CAAC,GAAGR,MAAM,CAACF,MAAX,CAAf;AACA,eAAOU,QAAP;AACH;;AACD,SAAK,YAAL;AAAmB;AACfL,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CL,KAA5C;AACA,YAAIP,OAAJ,GAAcqB,SAAd,CAAwBb,MAAM,CAACc,QAA/B;AACA,eAAOf,KAAP;AACH;;AAED;AACII,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,aAAOL,KAAP;AA/CR;AAiDH,CAlDD;;AAoDA,eAAeD,MAAf","sourcesContent":["import RestAPI from '../rest';\n\nconst initial = [\n    { id: 100, code: 'CNF001', title: 'All-Java Conference', description: 'Lectures and exhibits covering all Java topics' },\n    { id: 101, code: 'CNC001', title: 'Rock Concert', description: 'Full blown rock concert' }];\n\nconst events = (state = initial, action, data) => {\n    switch (action.type) {\n\n        case 'ADD_EVENT': {\n            console.log(\"in reducer event.ADD_EVENT\");\n            let otherevents = state.filter(\n                event => {\n                    if (event.id === action.event.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherevents, Object.assign({}, action.event)]\n            console.log(\"in reducer event.ADD_EVENT, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'DELETE_EVENT': {\n            console.log(\"in reducer events.DELETE_EVENT\");\n            let otherevents = state.filter(\n                (event) => {\n                    if (event.id === action.event.id ) {\n                        return false;\n                    } else {\n                        return true;\n                    }\n                }\n            );\n            let newstate = [...otherevents]\n            console.log(\"in reducer events.DELETE_EVENT, newstate: \" + JSON.stringify(newstate));\n            return newstate;\n        }\n\n        case 'APPLY_EVENTS_UPDATE': {\n            console.log(\"in reducer events.APPLY_EVENTS_UPDATE\", action.events);\n            let newstate = [...action.events];\n            return newstate;\n        }\n        case 'GET_EVENTS': {\n            console.log(\"in reducer events.GET_EVENTS\", state);\n            new RestAPI().getEvents(action.dispatch);\n            return state;\n        }\n\n        default:\n            console.log(\"in reducer event.default\");\n            return state\n    }\n}\n\nexport default events"]},"metadata":{},"sourceType":"module"}