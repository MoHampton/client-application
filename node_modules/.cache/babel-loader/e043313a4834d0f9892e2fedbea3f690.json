{"ast":null,"code":"var _jsxFileName = \"/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/components/EventList.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Event from './Event';\nimport { selectEvent, updateEventFormUsage, getEvents } from '../actions';\n\nclass EventList extends React.Component {\n  constructor(props) {\n    super(props);\n    console.log('in EventList: ' + JSON.stringify(this.props.events));\n  }\n\n  componentDidMount() {\n    if (!this.props.fetched) {\n      this.props.fetchRules(this.props.fetched);\n    }\n\n    console.log('mount it!');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"event-list\",\n      className: \"card bg-light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      className: \"card-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, \"List of Events\"), React.createElement(\"table\", {\n      className: \"table\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"Code\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, \"Description\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.props.events.map(event => React.createElement(Event, {\n      key: event.id,\n      event: event,\n      selectedId: this.props.appState.selectedId,\n      onClick: () => this.props.onEventClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    })))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      style: {\n        'paddingLeft': '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      style: {\n        width: 'fit-content'\n      },\n      className: \"btn btn-primary\",\n      type: 'button',\n      onClick: this.props.handleNewEventClick,\n      value: \"New Event\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    })));\n  }\n\n}\n\nEventList.propTypes = {\n  events: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired\n  }).isRequired).isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    events: state.events,\n    appState: state.appState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchRules: fetched => {\n      console.log('in EventList.fetchRules:');\n      dispatch(getEvents(dispatch));\n      fetched = true;\n    },\n    onEventClick: event => {\n      console.log('in EventList.onEventClick:' + JSON.stringify(event));\n      dispatch(selectEvent(event));\n      dispatch(updateEventFormUsage('view', event));\n    },\n    handleNewEventClick: () => {\n      console.log('in EventList.handleNewEventClick:');\n      dispatch(updateEventFormUsage('add'));\n      dispatch(selectEvent(-1));\n    }\n  };\n};\n\nconst VisibleEventList = connect(mapStateToProps, mapDispatchToProps)(EventList);\nexport default VisibleEventList;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/components/EventList.js"],"names":["React","connect","PropTypes","Event","selectEvent","updateEventFormUsage","getEvents","EventList","Component","constructor","props","console","log","JSON","stringify","events","componentDidMount","fetched","fetchRules","render","map","event","id","appState","selectedId","onEventClick","width","handleNewEventClick","propTypes","arrayOf","shape","number","isRequired","mapStateToProps","state","mapDispatchToProps","dispatch","VisibleEventList"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport Event from './Event'\nimport { selectEvent, updateEventFormUsage, getEvents } from '../actions'\n\nclass EventList extends React.Component  {\n  constructor(props) {\n     super(props);\n     console.log('in EventList: ' + JSON.stringify(this.props.events));\n  }\n\n  componentDidMount () {\n      if(!this.props.fetched) {\n          this.props.fetchRules(this.props.fetched);\n      }\n      console.log('mount it!');\n  }\n\n  static propTypes = {\n    events: PropTypes.arrayOf(PropTypes.shape({\n      id: PropTypes.number.isRequired\n    }).isRequired).isRequired\n  }\n\n  render() {\n    return (  \n      <div id='event-list'  className=\"card bg-light\" >\n        <h4 className='card-header'>List of Events</h4>\n          <table className='table'>\n          <thead>\n            <tr>\n              <th>Code</th>\n              <th>Title</th>\n              <th>Description</th>\n            </tr>\n          </thead>            \n            <tbody>\n            {this.props.events.map(event =>\n              <Event\n                key = {event.id}  \n                event={event}\n                selectedId={ this.props.appState.selectedId }  \n                onClick={() => this.props.onEventClick(event)} \n              />\n            )}\n          </tbody></table>\n          <hr></hr>\n          <p style={{'paddingLeft':'10px'}}>\n            <input style={{width:'fit-content'}} className='btn btn-primary' type={'button'} onClick={this.props.handleNewEventClick} value=\"New Event\" />\n          </p>          \n          \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    events: state.events,\n    appState: state.appState\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchRules: (fetched) => {\n      console.log('in EventList.fetchRules:');\n      dispatch(getEvents(dispatch));\n      fetched = true;\n    },\n\t\tonEventClick: (event) => {\n\t\t  console.log('in EventList.onEventClick:' + JSON.stringify(event));\n\t\t  dispatch(selectEvent(event));\n      dispatch(updateEventFormUsage('view', event));\n\t\t},\n    handleNewEventClick: () => {\n      console.log('in EventList.handleNewEventClick:');\n      dispatch(updateEventFormUsage('add'));\n      dispatch(selectEvent(-1));\n    }        \n  }\n}\n\nconst VisibleEventList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(EventList)\n\nexport default VisibleEventList"]},"metadata":{},"sourceType":"module"}