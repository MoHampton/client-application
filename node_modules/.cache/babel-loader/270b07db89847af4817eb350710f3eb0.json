{"ast":null,"code":"import { applyCustomersUpdate, applyEventsUpdate, applyRegistrationsUpdate, loginSucceeded, loginFailed } from '../actions';\n\nclass RestAPI {\n  constructor() {\n    this.myHeaders = new Headers({\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer \" + window.token\n    });\n\n    this.registerUser = (dispatch, username, password, email) => {\n      let url = \"/account/register\";\n      let customer = {\n        name: username,\n        email: email,\n        password: password\n      };\n      let body = JSON.stringify(customer);\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      var myInit = {\n        method: 'POST',\n        body: body,\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('register request completed: ', text);\n      });\n    };\n\n    this.getJWTToken = (dispatch, username, password) => {\n      let customer = {\n        \"name\": username,\n        password\n      };\n      this.callTokenService(customer).then(response => {\n        if (response !== \"\") {\n          let robj = JSON.parse(response);\n          let action = loginSucceeded(robj.token);\n          dispatch(action);\n        } else {\n          let action = loginFailed();\n          dispatch(action);\n        }\n      }, error => {\n        let action = loginFailed();\n        dispatch(action);\n      });\n    };\n\n    this.callTokenService = customer => {\n      let url = \"/account/token\";\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\"\n      });\n      let body = JSON.stringify(customer);\n      console.log(\"BODY.CUSTOMER: \" + JSON.stringify(customer));\n      var myInit = {\n        method: 'POST',\n        body: body,\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(url, myInit);\n      let promise2 = promise.then(response => {\n        let result = response.text();\n\n        if (result === undefined) {\n          console.log(\"response undefined\");\n          result = \"error: undefined\";\n        }\n\n        return result;\n      }, error => {\n        alert(error);\n      });\n      return promise2;\n    };\n\n    this.getRegistrations = dispatch => {\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'GET',\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(\"/api/registrations\", myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('Request successful: ', text);\n        let registrations = JSON.parse(text);\n        dispatch(applyRegistrationsUpdate(registrations));\n      });\n    };\n\n    this.putRegistration = (dispatch, registration) => {\n      let url = \"/api/registrations/\" + registration.id;\n      let body = JSON.stringify(registration);\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'PUT',\n        body: body,\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let getregistrations = this.getRegistrations;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('put request completed: ', text);\n        getregistrations(dispatch);\n      });\n    };\n\n    this.deleteRegistration = (dispatch, registration) => {\n      let url = \"/api/registrations/\" + registration.id;\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'DELETE',\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let getregistrations = this.getRegistrations;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('delete request completed: ', text);\n        getregistrations(dispatch);\n      });\n    };\n\n    this.getEvents = dispatch => {\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'GET',\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(\"/api/events\", myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('Request successful: ', text);\n        let events = JSON.parse(text);\n        dispatch(applyEventsUpdate(events));\n      });\n    };\n\n    this.putEvent = (dispatch, event) => {\n      let url = \"/api/events/\" + event.id;\n      let body = JSON.stringify(event);\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'PUT',\n        headers: myHeaders,\n        body: body,\n        mode: 'cors'\n      };\n      console.log(\"putEVENT.myInit: \" + JSON.stringify(myInit));\n      let getevents = this.getEvents;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('put request completed: ', text);\n        getevents(dispatch);\n      });\n    };\n\n    this.deleteEvent = (dispatch, event) => {\n      let url = \"/api/events/\" + event.id;\n      let myHeaders = new Headers({\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer \" + window.token\n      });\n      var myInit = {\n        method: 'DELETE',\n        headers: myHeaders,\n        mode: 'cors'\n      };\n      let getevents = this.getEvents;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('delete request completed: ', text);\n        getevents(dispatch);\n      });\n    };\n\n    this.getCustomers = dispatch => {\n      var myInit = {\n        method: 'GET',\n        headers: this.myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(\"/api/customers\", myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('getCustomers Request successful: ', text);\n        let customers = JSON.parse(text);\n        dispatch(applyCustomersUpdate(customers));\n      });\n    };\n\n    this.lookupCustomerByName = username => {\n      let url = \"/api/customers/byname\";\n      let body = username;\n      var myInit = {\n        method: 'POST',\n        body: body,\n        headers: this.myHeaders,\n        mode: 'cors'\n      };\n      let promise = fetch(url, myInit);\n      let promise2 = promise.then(response => {\n        console.log('lookupCustomerByName.promise2: ', JSON.stringify(response));\n        return response.text();\n      }, error => {\n        console.log('lookupCustomerByName.promise2.error: ', JSON.stringify(error));\n        return error.text();\n      });\n      return promise2;\n    };\n\n    this.putCustomer = (dispatch, customer) => {\n      let url = \"/api/customers/\" + customer.id;\n      let body = JSON.stringify(customer);\n      var myInit = {\n        method: 'PUT',\n        body: body,\n        headers: this.myHeaders,\n        mode: 'cors'\n      };\n      let getcustomers = this.getCustomers;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('put request completed: ', text);\n        getcustomers(dispatch);\n      });\n    };\n\n    this.deleteCustomer = (dispatch, customer) => {\n      let url = \"/api/customers/\" + customer.id;\n      var myInit = {\n        method: 'DELETE',\n        headers: this.myHeaders,\n        mode: 'cors'\n      };\n      let getcustomers = this.getCustomers;\n      let promise = fetch(url, myInit);\n      promise.then(response => {\n        return response.text();\n      }).then(function (text) {\n        console.log('delete request completed: ', text);\n        getcustomers(dispatch);\n      });\n    };\n  }\n\n}\n\nexport default RestAPI;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/rest/index.js"],"names":["applyCustomersUpdate","applyEventsUpdate","applyRegistrationsUpdate","loginSucceeded","loginFailed","RestAPI","myHeaders","Headers","window","token","registerUser","dispatch","username","password","email","url","customer","name","body","JSON","stringify","myInit","method","headers","mode","promise","fetch","then","response","text","console","log","getJWTToken","callTokenService","robj","parse","action","error","promise2","result","undefined","alert","getRegistrations","registrations","putRegistration","registration","id","getregistrations","deleteRegistration","getEvents","events","putEvent","event","getevents","deleteEvent","getCustomers","customers","lookupCustomerByName","putCustomer","getcustomers","deleteCustomer"],"mappings":"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","sourcesContent":["import { applyCustomersUpdate, applyEventsUpdate, \r\n  applyRegistrationsUpdate, loginSucceeded, loginFailed } from '../actions'\r\n \r\nclass RestAPI {\r\n\r\n  myHeaders = new Headers(\r\n    { \"Content-Type\": \"application/json\",\r\n      \"Authorization\": \"Bearer \" + window.token\r\n    });\r\n\r\n  /* LOGIN REQUESTS */\r\n  registerUser = (dispatch, username, password, email) => {\r\n    let url = \"/account/register\";\r\n    let customer = {\r\n      name: username,\r\n      email: email,\r\n      password: password\r\n    }\r\n    let body = JSON.stringify(customer);\r\n    let myHeaders = new Headers({ \"Content-Type\": \"application/json\" });\r\n\t\tvar myInit = { \r\n\t\t  method: 'POST',\r\n\t\t  body: body, \r\n\t\t  headers: myHeaders, \r\n\t\t  mode: 'cors' \r\n\t\t};\r\n\t\tlet promise = fetch(url, myInit);\r\n\t\tpromise.then((response) => {\r\n\t\t  return response.text();\r\n\t\t}).then(function (text) {\r\n\t\t  console.log('register request completed: ', text);\r\n\t\t});\r\n  }\r\n\r\n  getJWTToken = (dispatch, username, password) => {\r\n    let customer = {\"name\": username, password};\r\n    this.callTokenService(customer).then(\r\n      (response) => {\r\n        if(response !== \"\"){\r\n          let robj = JSON.parse(response);\r\n          let action = loginSucceeded(robj.token);\r\n          dispatch(action);\r\n        }else{\r\n          let action = loginFailed();\r\n          dispatch(action);          \r\n        }\r\n      },\r\n      (error) => {\r\n        let action = loginFailed();\r\n        dispatch(action);\r\n      });\r\n\r\n  }\r\n\r\n  callTokenService = (customer) => {\r\n    let url = \"/account/token\"\r\n    let myHeaders = new Headers({ \"Content-Type\": \"application/json\" });\r\n    let body = JSON.stringify(customer);\r\n    console.log(\"BODY.CUSTOMER: \" + JSON.stringify(customer));\r\n    var myInit = {\r\n      method: 'POST',\r\n      body: body,\r\n      headers: myHeaders,\r\n      mode: 'cors'\r\n    };\r\n    let promise = fetch(url, myInit);\r\n    let promise2 = promise.then((response) => {\r\n      let result = response.text();\r\n      if (result === undefined) {\r\n        console.log(\"response undefined\");\r\n        result = \"error: undefined\";\r\n      }\r\n      return result;\r\n    },\r\n      (error) => {\r\n        alert(error);\r\n      }\r\n    )\r\n    return promise2;\r\n  }\r\n\r\n\r\n  /* REGISTRATION REQUESTS */\r\n  getRegistrations = ( dispatch ) => {\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n    var myInit = { method: 'GET', headers: myHeaders, mode: 'cors' };\r\n    let promise = fetch(\"/api/registrations\", myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('Request successful: ', text);\r\n      let registrations = JSON.parse(text);\r\n      dispatch(applyRegistrationsUpdate(registrations));\r\n    });\r\n  }\r\n\r\n\tputRegistration = ( dispatch, registration ) => {\r\n\t\tlet url = \"/api/registrations/\" + registration.id;\r\n    let body = JSON.stringify(registration);\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n\t\tvar myInit = { \r\n\t\t  method: 'PUT',\r\n\t\t  body: body, \r\n\t\t  headers: myHeaders, \r\n\t\t  mode: 'cors' \r\n\t\t};\r\n\t\tlet getregistrations = this.getRegistrations;\r\n\t\tlet promise = fetch(url, myInit);\r\n\t\tpromise.then((response) => {\r\n\t\t  return response.text();\r\n\t\t}).then(function (text) {\r\n\t\t  console.log('put request completed: ', text);\r\n\t\t  getregistrations(dispatch);\r\n\t\t});\r\n\t}\r\n\r\n  deleteRegistration = ( dispatch, registration ) => {\r\n    let url = \"/api/registrations/\" + registration.id;\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n    var myInit = { method: 'DELETE', headers: myHeaders, mode: 'cors' };\r\n    let getregistrations = this.getRegistrations;\r\n    let promise = fetch(url, myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('delete request completed: ', text);\r\n      getregistrations(dispatch);\r\n    });\r\n  }\r\n\r\n  /* EVENT REQUESTS */  \r\n  getEvents = ( dispatch ) => {\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n    var myInit = { method: 'GET', headers: myHeaders, mode: 'cors' };\r\n    let promise = fetch(\"/api/events\", myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('Request successful: ', text);\r\n      let events = JSON.parse(text);\r\n      dispatch(applyEventsUpdate(events));\r\n    });\r\n  }\r\n\r\n\tputEvent = ( dispatch, event ) => {\r\n\t\tlet url = \"/api/events/\" + event.id;\r\n    let body = JSON.stringify(event);\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n\t\tvar myInit = { \r\n      method: 'PUT',\r\n      headers: myHeaders,\r\n\t\t  body: body, \r\n\t\t  mode: 'cors' \r\n    };\r\n    console.log(\"putEVENT.myInit: \" + JSON.stringify(myInit));\r\n\t\tlet getevents = this.getEvents;\r\n\t\tlet promise = fetch(url, myInit);\r\n\t\tpromise.then((response) => {\r\n\t\t  return response.text();\r\n\t\t}).then(function (text) {\r\n\t\t  console.log('put request completed: ', text);\r\n\t\t  getevents(dispatch);\r\n\t\t});\r\n\t}\r\n\r\n  deleteEvent = ( dispatch, event ) =>  {\r\n    let url = \"/api/events/\" + event.id;\r\n    let myHeaders = new Headers(\r\n      { \"Content-Type\": \"application/json\",\r\n        \"Authorization\": \"Bearer \" + window.token\r\n      });\r\n    var myInit = { method: 'DELETE', headers: myHeaders, mode: 'cors' };\r\n    let getevents = this.getEvents;\r\n    let promise = fetch(url, myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('delete request completed: ', text);\r\n      getevents(dispatch);\r\n    });\r\n  }\r\n\r\n  /* CUSTOMER REQUESTS */\r\n  getCustomers = ( dispatch) => {\r\n    var myInit = { method: 'GET', headers: this.myHeaders, mode: 'cors' };\r\n    let promise = fetch(\"/api/customers\", myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('getCustomers Request successful: ', text);\r\n      let customers = JSON.parse(text);\r\n      dispatch(applyCustomersUpdate(customers));\r\n    });\r\n  }\r\n\r\n  lookupCustomerByName = ( username ) => {\r\n    let url = \"/api/customers/byname\";\r\n    let body = username;\r\n\r\n    var myInit = { \r\n      method: 'POST', \r\n      body: body,\r\n      headers: this.myHeaders, \r\n      mode: 'cors'\r\n    };\r\n    let promise = fetch(url, myInit);\r\n    let promise2 = promise.then(\r\n      (response) => {\r\n        console.log('lookupCustomerByName.promise2: ', JSON.stringify(response));\r\n        return response.text();\r\n      },\r\n      (error) => {\r\n        console.log('lookupCustomerByName.promise2.error: ', JSON.stringify(error));\r\n        return error.text();\r\n      }    \r\n    );\r\n    return promise2;\r\n  }\r\n\r\n\r\n\tputCustomer = ( dispatch, customer ) => {\r\n\t\tlet url = \"/api/customers/\" + customer.id;\r\n\t\tlet body = JSON.stringify(customer);\r\n\t\tvar myInit = { \r\n\t\t  method: 'PUT',\r\n\t\t  body: body, \r\n\t\t  headers: this.myHeaders, \r\n\t\t  mode: 'cors' \r\n\t\t};\r\n\t\tlet getcustomers = this.getCustomers;\r\n\t\tlet promise = fetch(url, myInit);\r\n\t\tpromise.then((response) => {\r\n\t\t  return response.text();\r\n\t\t}).then(function (text) {\r\n\t\t  console.log('put request completed: ', text);\r\n\t\t  getcustomers(dispatch);\r\n\t\t});\r\n\t}\r\n\r\n  deleteCustomer = ( dispatch, customer ) => {\r\n    let url = \"/api/customers/\" + customer.id;\r\n    var myInit = { method: 'DELETE', headers: this.myHeaders, mode: 'cors' };\r\n    let getcustomers = this.getCustomers;\r\n    let promise = fetch(url, myInit);\r\n    promise.then((response) => {\r\n      return response.text();\r\n    }).then(function (text) {\r\n      console.log('delete request completed: ', text);\r\n      getcustomers(dispatch);\r\n    });\r\n  }\t\r\n\r\n}\r\n\r\nexport default RestAPI;"]},"metadata":{},"sourceType":"module"}