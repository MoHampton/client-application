{"ast":null,"code":"const initial = {\n  usage: 'none',\n  customer: {\n    id: \"\",\n    name: \"\",\n    email: \"\"\n  },\n  event: {\n    id: \"-1\",\n    code: \"\",\n    title: \"\",\n    description: \"\"\n  },\n  registration: {\n    id: \"-1\",\n    event_id: \"-1\",\n    customer_id: \"-1\",\n    registration_date: -1,\n    notes: \"\"\n  }\n};\n\nconst formState = (state = initial, action, data) => {\n  switch (action.type) {\n    case 'UPDATE_CUSTOMER_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let customer = Object.assign({}, state.customer, field);\n        const obj = Object.assign({}, state, {\n          customer\n        });\n        return obj;\n      }\n\n    case 'UPDATE_CUSTOMER_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_customer = {\n          customer: {\n            id: \"-1\",\n            name: \"\",\n            email: \"\"\n          }\n        };\n        console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_customer = {\n            customer: Object.assign({}, action.customer)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\n          new_customer = {\n            customer: {\n              id: id,\n              name: \"\",\n              email: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_customer, usage);\n      }\n\n    case 'UPDATE_EVENT_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let event = Object.assign({}, state.event, field);\n        const obj = Object.assign({}, state, {\n          event\n        });\n        return obj;\n      }\n\n    case 'UPDATE_EVENT_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_event = {\n          event: {\n            id: -1,\n            code: \"\",\n            title: \"\",\n            description: \"\"\n          }\n        };\n        console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_event = {\n            event: Object.assign({}, action.event)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_event = {\n            event: {\n              id: id,\n              code: \"\",\n              title: \"\",\n              description: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_event, usage);\n      }\n\n    case 'UPDATE_REGISTRATION_FORM_OBJECT':\n      {\n        let field = {};\n        field[action.field_name] = action.field_value;\n        let registration = Object.assign({}, state.registration, field);\n        const obj = Object.assign({}, state, {\n          registration\n        });\n        return obj;\n      }\n\n    case 'UPDATE_REGISTRATION_FORM_USAGE':\n      {\n        let usage = {\n          usage: action.usage\n        };\n        let new_registration = {\n          registration: {\n            id: -1,\n            event_id: \"-1\",\n            customer_id: \"-1\",\n            registration_date: -1,\n            notes: \"\"\n          }\n        };\n        console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration));\n\n        if (action.usage === 'view' || action.usage === 'edit') {\n          new_registration = {\n            registration: Object.assign({}, action.registration)\n          };\n        } else {\n          let id = Math.floor(1000 * (1 + Math.random(Date.now())));\n          new_registration = {\n            registration: {\n              id: id,\n              event_id: \"-1\",\n              customer_id: \"-1\",\n              registration_date: -1,\n              notes: \"\"\n            }\n          };\n        }\n\n        return Object.assign({}, state, new_registration, usage);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default formState;","map":{"version":3,"sources":["/Users/moxiehampton/IdeaProjects/Metropolitan-Covention-Center-Application/client-application/src/reducers/formState.js"],"names":["initial","usage","customer","id","name","email","event","code","title","description","registration","event_id","customer_id","registration_date","notes","formState","state","action","data","type","field","field_name","field_value","Object","assign","obj","new_customer","console","log","JSON","stringify","Math","floor","random","Date","now","toString","new_event","new_registration"],"mappings":"AAAA,MAAMA,OAAO,GAAG;AACdC,EAAAA,KAAK,EAAE,MADO;AAEdC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,EAAE,EAAE,EAAN;AAAUC,IAAAA,IAAI,EAAE,EAAhB;AAAoBC,IAAAA,KAAK,EAAE;AAA3B,GAFI;AAGdC,EAAAA,KAAK,EAAE;AAAEH,IAAAA,EAAE,EAAE,IAAN;AAAYI,IAAAA,IAAI,EAAE,EAAlB;AAAsBC,IAAAA,KAAK,EAAE,EAA7B;AAAiCC,IAAAA,WAAW,EAAE;AAA9C,GAHO;AAIdC,EAAAA,YAAY,EAAE;AAAEP,IAAAA,EAAE,EAAE,IAAN;AAAYQ,IAAAA,QAAQ,EAAE,IAAtB;AAA4BC,IAAAA,WAAW,EAAE,IAAzC;AAA+CC,IAAAA,iBAAiB,EAAE,CAAC,CAAnE;AAAsEC,IAAAA,KAAK,EAAE;AAA7E;AAJA,CAAhB;;AAOA,MAAMC,SAAS,GAAG,CAACC,KAAK,GAAGhB,OAAT,EAAkBiB,MAAlB,EAA0BC,IAA1B,KAAmC;AAEnD,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,6BAAL;AAAoC;AAClC,YAAIC,KAAK,GAAG,EAAZ;AACAA,QAAAA,KAAK,CAACH,MAAM,CAACI,UAAR,CAAL,GAA2BJ,MAAM,CAACK,WAAlC;AACA,YAAIpB,QAAQ,GAAGqB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAK,CAACd,QAAxB,EAAkCkB,KAAlC,CAAf;AACA,cAAMK,GAAG,GAAGF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyB;AAAEd,UAAAA;AAAF,SAAzB,CAAZ;AACA,eAAOuB,GAAP;AACD;;AAED,SAAK,4BAAL;AAAmC;AACjC,YAAIxB,KAAK,GAAG;AAAEA,UAAAA,KAAK,EAAEgB,MAAM,CAAChB;AAAhB,SAAZ;AACA,YAAIyB,YAAY,GAAG;AAAExB,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,EAAE,EAAE,IAAN;AAAYC,YAAAA,IAAI,EAAE,EAAlB;AAAsBC,YAAAA,KAAK,EAAE;AAA7B;AAAZ,SAAnB;AAEAsB,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAkCX,MAAM,CAAChB,KAAzC,GAAiD,qBAAjD,GAAyE4B,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACf,QAAtB,CAArF;;AAEA,YAAIe,MAAM,CAAChB,KAAP,KAAiB,MAAjB,IAA2BgB,MAAM,CAAChB,KAAP,KAAiB,MAAhD,EAAwD;AACtDyB,UAAAA,YAAY,GAAG;AAAExB,YAAAA,QAAQ,EAAEqB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAM,CAACf,QAAzB;AAAZ,WAAf;AACD,SAFD,MAEO;AACL,cAAIC,EAAE,GAAG4B,IAAI,CAACC,KAAL,CAAW,QAAQ,IAAID,IAAI,CAACE,MAAL,CAAYC,IAAI,CAACC,GAAL,EAAZ,CAAZ,CAAX,EAAiDC,QAAjD,EAAT;AACAV,UAAAA,YAAY,GAAG;AAAExB,YAAAA,QAAQ,EAAE;AAAEC,cAAAA,EAAE,EAAEA,EAAN;AAAUC,cAAAA,IAAI,EAAE,EAAhB;AAAoBC,cAAAA,KAAK,EAAE;AAA3B;AAAZ,WAAf;AACD;;AAED,eAAOkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyBU,YAAzB,EAAuCzB,KAAvC,CAAP;AACD;;AAED,SAAK,0BAAL;AAAiC;AAC/B,YAAImB,KAAK,GAAG,EAAZ;AACAA,QAAAA,KAAK,CAACH,MAAM,CAACI,UAAR,CAAL,GAA2BJ,MAAM,CAACK,WAAlC;AACA,YAAIhB,KAAK,GAAGiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAK,CAACV,KAAxB,EAA+Bc,KAA/B,CAAZ;AACA,cAAMK,GAAG,GAAGF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyB;AAAEV,UAAAA;AAAF,SAAzB,CAAZ;AACA,eAAOmB,GAAP;AACD;;AAED,SAAK,yBAAL;AAAgC;AAC9B,YAAIxB,KAAK,GAAG;AAAEA,UAAAA,KAAK,EAAEgB,MAAM,CAAChB;AAAhB,SAAZ;AACA,YAAIoC,SAAS,GAAG;AAAE/B,UAAAA,KAAK,EAAE;AAAEH,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUI,YAAAA,IAAI,EAAE,EAAhB;AAAoBC,YAAAA,KAAK,EAAE,EAA3B;AAA+BC,YAAAA,WAAW,EAAE;AAA5C;AAAT,SAAhB;AAEAkB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BX,MAAM,CAAChB,KAAtC,GAA8C,kBAA9C,GAAmE4B,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACX,KAAtB,CAA/E;;AAEA,YAAIW,MAAM,CAAChB,KAAP,KAAiB,MAAjB,IAA2BgB,MAAM,CAAChB,KAAP,KAAiB,MAAhD,EAAwD;AACtDoC,UAAAA,SAAS,GAAG;AAAE/B,YAAAA,KAAK,EAAEiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAM,CAACX,KAAzB;AAAT,WAAZ;AACD,SAFD,MAEO;AACL,cAAIH,EAAE,GAAG4B,IAAI,CAACC,KAAL,CAAW,QAAQ,IAAID,IAAI,CAACE,MAAL,CAAYC,IAAI,CAACC,GAAL,EAAZ,CAAZ,CAAX,CAAT;AACAE,UAAAA,SAAS,GAAG;AAAE/B,YAAAA,KAAK,EAAE;AAAEH,cAAAA,EAAE,EAAEA,EAAN;AAAUI,cAAAA,IAAI,EAAE,EAAhB;AAAoBC,cAAAA,KAAK,EAAE,EAA3B;AAA+BC,cAAAA,WAAW,EAAE;AAA5C;AAAT,WAAZ;AACD;;AAED,eAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyBqB,SAAzB,EAAoCpC,KAApC,CAAP;AACD;;AAED,SAAK,iCAAL;AAAwC;AACtC,YAAImB,KAAK,GAAG,EAAZ;AACAA,QAAAA,KAAK,CAACH,MAAM,CAACI,UAAR,CAAL,GAA2BJ,MAAM,CAACK,WAAlC;AACA,YAAIZ,YAAY,GAAGa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAK,CAACN,YAAxB,EAAsCU,KAAtC,CAAnB;AACA,cAAMK,GAAG,GAAGF,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyB;AAAEN,UAAAA;AAAF,SAAzB,CAAZ;AACA,eAAOe,GAAP;AACD;;AAED,SAAK,gCAAL;AAAuC;AACrC,YAAIxB,KAAK,GAAG;AAAEA,UAAAA,KAAK,EAAEgB,MAAM,CAAChB;AAAhB,SAAZ;AACA,YAAIqC,gBAAgB,GAAG;AAAE5B,UAAAA,YAAY,EAAE;AAAEP,YAAAA,EAAE,EAAE,CAAC,CAAP;AAAUQ,YAAAA,QAAQ,EAAE,IAApB;AAA0BC,YAAAA,WAAW,EAAE,IAAvC;AAA6CC,YAAAA,iBAAiB,EAAE,CAAC,CAAjE;AAAoEC,YAAAA,KAAK,EAAE;AAA3E;AAAhB,SAAvB;AAEAa,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAsCX,MAAM,CAAChB,KAA7C,GAAqD,yBAArD,GAAiF4B,IAAI,CAACC,SAAL,CAAeb,MAAM,CAACP,YAAtB,CAA7F;;AAEA,YAAIO,MAAM,CAAChB,KAAP,KAAiB,MAAjB,IAA2BgB,MAAM,CAAChB,KAAP,KAAiB,MAAhD,EAAwD;AACtDqC,UAAAA,gBAAgB,GAAG;AAAE5B,YAAAA,YAAY,EAAEa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,MAAM,CAACP,YAAzB;AAAhB,WAAnB;AACD,SAFD,MAEO;AACL,cAAIP,EAAE,GAAG4B,IAAI,CAACC,KAAL,CAAW,QAAQ,IAAID,IAAI,CAACE,MAAL,CAAYC,IAAI,CAACC,GAAL,EAAZ,CAAZ,CAAX,CAAT;AACAG,UAAAA,gBAAgB,GAAG;AAAE5B,YAAAA,YAAY,EAAE;AAAEP,cAAAA,EAAE,EAAEA,EAAN;AAAUQ,cAAAA,QAAQ,EAAE,IAApB;AAA0BC,cAAAA,WAAW,EAAE,IAAvC;AAA6CC,cAAAA,iBAAiB,EAAE,CAAC,CAAjE;AAAoEC,cAAAA,KAAK,EAAE;AAA3E;AAAhB,WAAnB;AACD;;AAED,eAAOS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAlB,EAAyBsB,gBAAzB,EAA2CrC,KAA3C,CAAP;AACD;;AAED;AACE,aAAOe,KAAP;AA1EJ;AA4ED,CA9ED;;AAgFA,eAAeD,SAAf","sourcesContent":["const initial = { \r\n  usage: 'none', \r\n  customer: { id: \"\", name: \"\", email: \"\" } ,\r\n  event: { id: \"-1\", code: \"\", title: \"\", description: \"\" },\r\n  registration: { id: \"-1\", event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" }\r\n};\r\n\r\nconst formState = (state = initial, action, data) => {\r\n\r\n  switch (action.type) {\r\n    case 'UPDATE_CUSTOMER_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let customer = Object.assign({}, state.customer, field);\r\n      const obj = Object.assign({}, state, { customer });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_CUSTOMER_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_customer = { customer: { id: \"-1\", name: \"\", email: \"\" } };\r\n\r\n      console.log(\"UPDATE_CUSTOMER_FORM_USAGE: (\" + action.usage + \") action.customer: \" + JSON.stringify(action.customer))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_customer = { customer: Object.assign({}, action.customer) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now()))).toString();\r\n        new_customer = { customer: { id: id, name: \"\", email: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_customer, usage);\r\n    }\r\n\r\n    case 'UPDATE_EVENT_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let event = Object.assign({}, state.event, field);\r\n      const obj = Object.assign({}, state, { event });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_EVENT_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_event = { event: { id: -1, code: \"\", title: \"\", description: \"\" } };\r\n\r\n      console.log(\"UPDATE_EVENT_FORM_USAGE: (\" + action.usage + \") action.event: \" + JSON.stringify(action.event))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_event = { event: Object.assign({}, action.event) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\r\n        new_event = { event: { id: id, code: \"\", title: \"\", description: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_event, usage);\r\n    }\r\n\r\n    case 'UPDATE_REGISTRATION_FORM_OBJECT': {\r\n      let field = {};\r\n      field[action.field_name] = action.field_value;\r\n      let registration = Object.assign({}, state.registration, field);\r\n      const obj = Object.assign({}, state, { registration });\r\n      return obj;\r\n    }\r\n\r\n    case 'UPDATE_REGISTRATION_FORM_USAGE': {\r\n      let usage = { usage: action.usage };\r\n      let new_registration = { registration: { id: -1, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\r\n\r\n      console.log(\"UPDATE_REGISTRATION_FORM_USAGE: (\" + action.usage + \") action.registration: \" + JSON.stringify(action.registration))\r\n\r\n      if (action.usage === 'view' || action.usage === 'edit') {\r\n        new_registration = { registration: Object.assign({}, action.registration) };\r\n      } else {\r\n        let id = Math.floor(1000 * (1 + Math.random(Date.now())));\r\n        new_registration = { registration: { id: id, event_id: \"-1\", customer_id: \"-1\", registration_date: -1, notes: \"\" } };\r\n      }\r\n\r\n      return Object.assign({}, state, new_registration, usage);\r\n    }\r\n    \r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default formState"]},"metadata":{},"sourceType":"module"}